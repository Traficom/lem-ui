
name: Node.js CI

on:
  [ push, pull_request ]

jobs:
  build:

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      - run: npm ci
      - name: Log Tag Name
        run: echo ${{ github.ref }}
      - run: npm run make
      - name: Publish package
        run: npm run publish --verbose
        if: ${{ github.ref == 'refs/heads/VLE-690_calculate_sha256_from_installer' && github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: node hash.js
      - name: Verify Asset File Existence
        run: |
          $ASSET_FILE = "./out/prod/make/squirrel.windows/x64/sha256sum.txt"

          if (-Not (Test-Path $ASSET_FILE)) {
            Write-Host "Error: The file does not exist at $ASSET_FILE"
            exit 1
          } else {
            Write-Host "File exists: $ASSET_FILE"
          }
      - name: Upload SHA256 Hash File
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $TAG_NAME = "v1.0.3"
          $RELEASE = gh api repos/Traficom/lem-ui/releases --paginate | jq -r --arg TAG_NAME $TAG_NAME '.[] | select(.tag_name == $TAG_NAME)'
  
          if (-not $RELEASE) {
                Write-Host "No release found for tag: $TAG_NAME"
                exit 1
          }

          Write-Host "Matching Release: $RELEASE"
          $RELEASE | Out-File -FilePath release.json
    
          $UPLOAD_URL = ($RELEASE | ConvertFrom-Json).upload_url -replace "{\?name,label}", ""
          Write-Host "Upload URL: $UPLOAD_URL"
    
          $ASSET_FILE = ".\out\prod\make\squirrel.windows\x64\sha256sum.txt"
          $ASSET_NAME = "sha256sum.txt"
  
          if (-not (Test-Path $ASSET_FILE)) {
                Write-Host "Error: The file does not exist at $ASSET_FILE"
                exit 1
          }
          Write-Host "Uploading asset..."
          curl -X POST "$UPLOAD_URL?name=$ASSET_NAME" `
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
          -H "Content-Type: text/plain" `
          --data-binary @"$ASSET_FILE"
    
          Write-Host "Asset uploaded successfully!"
